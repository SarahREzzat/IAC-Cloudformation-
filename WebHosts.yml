AWSTemplateFormatVersion: 2010-09-09
Description: Hosting High-Avalisbility Web Udagram-Udacity this for hosts
Parameters:
  Suffix:
    Description: This suffix is used to present the deployment environment and the deployed app 
    Type: String 
    Default: Test-Udagram

Outputs:
  URL:
    Description: This the the URL of the app
    Value: !Sub 
      - 'http://${Domain}'
      - Domain: !GetAtt WebLoadBalancer.DNSName
    Export:
      Name: !Sub ${Suffix}-URL
    

Resources:
#---------- S3 role to be assigned to the instance
  S3IAM:
    Type: 'AWS::IAM::Role'
    Properties: 
      RoleName: s3roleforec2
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: EC2IAMS3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3-object-lambda:Get*"
                  - "s3-object-lambda:List*"
                Resource: '*'
  WebInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref S3IAM
#------------------- Security groups for bastion , LB and autoscaling group 
  BastionSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: This group allow 22 from anywhere but that will be better if you restricted it to your ip
      GroupName: !Sub ${Suffix}-Bastion-SG
      SecurityGroupEgress: 
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !ImportValue 
        'Fn::Sub': '${Suffix}-VPCID' 
   
  SecurityGroupForLB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: This group allow 80 from anywhere to LB
      GroupName: !Sub ${Suffix}-LB
      SecurityGroupEgress: 
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !ImportValue 
        'Fn::Sub': '${Suffix}-VPCID' 

  SecurityGroupForWeb:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: This group allow 80 from anywhere we are restrict it to be allowed from the LB only
      GroupName: !Sub ${Suffix}-Web-SG
      SecurityGroupEgress: 
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !ImportValue 
        'Fn::Sub': '${Suffix}-VPCID' 

#---------------lanuch Template 
  UdagramLaunchTemplate:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-005de95e8ff495156
      InstanceType: t2.medium
      LaunchConfigurationName: UdagramLaunchTemplate
      SecurityGroups:
        - !Ref SecurityGroupForWeb
      IamInstanceProfile: !Ref WebInstanceProfile
      BlockDeviceMappings: 
        - DeviceName: /dev/sda1
          Ebs: 
            VolumeSize: '10'
            VolumeType: gp3
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt install unzip
          unzip awscliv2.zip
          sudo ./aws/install
          aws s3 cp s3://udagramcontent/index.html /var/www/html/index.html

#--- target group for the Load balancer
  UdagramTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Suffix}-WebTG
      TargetType: instance
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      VpcId: !ImportValue 
        'Fn::Sub': '${Suffix}-VPCID' 

#--------- load balancer 
  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Suffix}-LB
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups: 
        - !Ref SecurityGroupForLB 
      Subnets:
        - !ImportValue 
          'Fn::Sub': ${Suffix}-PublicA
        - !ImportValue 
          'Fn::Sub': ${Suffix}-PublicB
      Type: application
      Tags:
        - Key: Name
          Value: !Sub ${Suffix}-LB

#------- Listener for load balancer
  WebListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups: 
              - TargetGroupArn: !Ref UdagramTG
      LoadBalancerArn: !Ref WebLoadBalancer
      Port: 80
      Protocol: HTTP      
   
  # WebListenerRule:
  #   Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
  #   Properties:
  #     Actions: 
  #       - Type: forward
  #         ForwardConfig:
  #           TargetGroups: 
  #             - TargetGroupArn: !Ref UdagramTG
  #     ListenerArn: !Ref WebListener
  #     Priority: 1

  WebAutoscaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub ${Suffix}-ASG
      LaunchConfigurationName: !Ref UdagramLaunchTemplate
      VPCZoneIdentifier: 
        - !ImportValue 
          'Fn::Sub': ${Suffix}-PrivateA
        - !ImportValue 
          'Fn::Sub': ${Suffix}-PrivateB
      MaxSize: '6'
      MinSize: '2'
      DesiredCapacity: '2'
      HealthCheckType: ELB
      TargetGroupARNs:
        - !Ref UdagramTG

  AutoScalingPolicyForWeb:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref WebAutoscaleGroup
      PolicyType: PredictiveScaling
      PredictiveScalingConfiguration:
        MetricSpecifications:
          - TargetValue: '75'
            PredefinedMetricPairSpecification:
              PredefinedMetricType: ASGCPUUtilization

##---------- bastion instance (acting as jump server )
  BastionServer:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      ImageId: ami-005de95e8ff495156
      Tags:
      - Key: Name
        Value: Bastion
      KeyName: ssh-key
      InstanceType: t2.micro
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        GroupSet:
        - !Ref BastionSG
        DeviceIndex: 0
        SubnetId: !ImportValue 
          'Fn::Sub': ${Suffix}-PublicA 



      # ImageId: ami-005de95e8ff495156
      # InstanceType: t2.medium
      # KeyName: ssh-key
      # SecurityGroups:
      #   - !Ref BastionSG
      # BlockDeviceMappings: 
      #   - DeviceName: /dev/sda1
      #     Ebs: 
      #       VolumeSize: '10'
      #       VolumeType: gp3
      # SubnetId: !ImportValue 
      #     'Fn::Sub': ${Suffix}-PublicA
      # VpcId: 
                

      
          
  # launch config , target , load, autoscale, bastion 